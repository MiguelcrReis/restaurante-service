### Curso de Microsserviços e .NET6: implementando a comunicação
________________________________________________________________

## Capítulo 01 - Requisições síncronas

Para um envio HTTP:
	O conteúdo devidamente serializado.
	Endereço de destino.
	
________________________________________________________________

## Capítulo 02 - Dockernizando apps .NET

# Por que usar o Docker?
	- Docker facilitará o processo de entrega e deploy visto que ele tornará nossa aplicação mais fácil de ser portada e executada em diferentes sistemas.
	- Maior controle de versionamento (Através das imagens, conseguiremos criar e incrementar versões de imagens).
	- Maior controle de conflito de portas (Como nossas aplicações serão executadas dentro de containers, o controle sobre a execução de portas será maior.).
	

RUN dotnet restore -> Sem essa etapa, nossas dependências não serão resolvidas para nossa aplicação executar sem problemas.

________________________________________________________________

## Capítulo 03 - Otimizando e testando

# Aplicando multi-stage build

	# multi-stage build -> Etapas intermediárias são usadas para construir o necessário que será passado apenas para a imagem final.

		FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
		WORKDIR /app
		COPY *.csproj ./
		RUN dotnet restore
		COPY . ./
		RUN dotnet publish -c Release -o out

		FROM mcr.microsoft.com/dotnet/aspnet:6.0
		WORKDIR /app
		COPY --from=build /app/out .     
		ENTRYPOINT [ "dotnet", "ItemService.dll" ]
		
	Este exemplo está declarando a criação de duas Images no mesmo Dockerfile.
	Onde o primeiro é a Image base, que irá contruir a aplicação no container, e o segundo irá ser usado para colocar a aplicação em execução.
		app/out é o app "buildado"
		
		COPY --from=build /app/out . -> Copia a saida da image de build para a nova image gerada usar como base.
		
	Utilizando este método, é economizado mais espaço, por gerar images mais leves, por não armazenarem todos os componentes de build em camadas da image.
	
	
	No projeto de exemplo, estavamos usando um banco mysql local. Porém, para trabalhar com containers, é ncessário ter um banco que rode em um container também:
	
	docker run --name=mysql -e MYSQL_ROOT_PASSWORD=Dev@0258 -d mysql:5.6
	
	Comando para executar um container mysql.
	
	Após criar o container mysql, usamos o comando docker inspect [id-container] para verficiar o IPAddress do mesmo.
	Agora então, vamos alterar a string de conexão para buscar o server da aplicação, no ip do container mysql:
		"ConnectionStrings":  {
    "RestauranteConnection": "server=172.17.0.3;database=restaurantedb;user=root;password=root"
	
	Configurar a conexão entre os container itemservice e restaurante service:
	"ItemService": "http://172.17.0.4/api/item/restaurante"
	
	Pegando o endereço do container do itemservice e inserindo na variaval de ambiente "ItemService" do arquivo de configuração do restauranteservie.
	
	docker logs -f id-container -> Exibe os logs gerados pelo container.
	
	
	Ao invés de usar os IP's para fazer a comunicação entre containers e bancos, vamos usar os nomes dos serviços, pois IP's são dinâmicos e podem ser alterados. 
	
	- Para isso, devemos criar um rede com o driver bridge.
	- Depois colocamos os containers em execução passando a network criada.
	
	docker network create --driver bridge restaurante-bridge
	
	docker run --name item-service -d -p 8080:80 --network restaurante-bridge itemservice:1.1
	
	docker run --name=mysql -e MYSQL_ROOT_PASSWORD=root -d --network restaurante-bridge mysql:5.6
	
	docker run --name restaurante-service -p 8081:80 --network restaurante-bridge restauranteservice:1.4
	
	
	- Para acessar o container com o mysql.
	docker exec -it mysql bash
	
	
	
________________________________________________________________

## Capítulo 04 - Requisições Assíncronas

	# Beneficios: 
	* Autonomia maior por não necessitar aguardar o retorno do serviço posterior.
	* Vários serviços podem consumir o mesmo serviço, já que as requisições entre eles serão enfileiradas.
	
	
	# RabbitMQ -> É um sistema de mensageria, utilizado para comunicação entre serviços.
	
	# Sintaxe correta para abertura de conexão entre uma aplicação .NET e o RabbitMQ:
		new ConnectionFactory() { HostName = “enderecoParaOHost”, Port = 1234 }.CreateConnection();`

	
	- ExchangeType.Fanout -> Define qual a Exchange do channel.
	- AMQP -> Procolo de comunicação.

	- Requisições assíncronas são mais difíceis de implementar, porém com elas temos maior confiabilidade em nossa comunicação.


	# Como fazer a publicação de algum dado para o RabbitMQ?
		- Devemos utilizar o método BasicPublish() através do canal aberto com o RabbitMQ.
		
		
________________________________________________________________

## Capítulo 05 - Consumindo dados de filas

	# De qual forma podemos especificar em qual fila nossa aplicação que irá consumir deve se conectar?
		- Devemos utilizar o método QueueBind() através do canal aberto com o RabbitMQ.
			Devemos utilizar o canal aberto como intermediário para vincular uma fila.
			
	
	# Para o fluxo do projeto de exemplo, foi necessário definir um serviço que fique em execução em segundo plano, um BackgroundService. 
	Devemos sobrescrever a implementação do método ExecuteAsync().
	
	
	# Criar os containers:
	
		docker build -t restauranteservice:1.5 .
		docker build -t itemservice:1.2 .
		
	# Executar os containers:
		
		docker run -d --hostname rabbitmq-service --name rabbitmq-service --network restaurante-bridge rabbitmq:3-management
		
		docker run --name restaurante-service -d -p 8081:80 --network restaurante-bridge restauranteservice:1.5
		
		docker run --name item-service -d -p 8080:80 --network restaurante-bridge itemservice:1.2
	