### Curso de Microsserviços e .NET6: implementando a comunicação
________________________________________________________________

## Capítulo 01 - Requisições síncronas

Para um envio HTTP:
	O conteúdo devidamente serializado.
	Endereço de destino.
	
________________________________________________________________

## Capítulo 02 - Dockernizando apps .NET

# Por que usar o Docker?
	- Docker facilitará o processo de entrega e deploy visto que ele tornará nossa aplicação mais fácil de ser portada e executada em diferentes sistemas.
	- Maior controle de versionamento (Através das imagens, conseguiremos criar e incrementar versões de imagens).
	- Maior controle de conflito de portas (Como nossas aplicações serão executadas dentro de containers, o controle sobre a execução de portas será maior.).
	

RUN dotnet restore -> Sem essa etapa, nossas dependências não serão resolvidas para nossa aplicação executar sem problemas.

________________________________________________________________

## Capítulo 03 - Otimizando e testando

# Aplicando multi-stage build

	# multi-stage build -> Etapas intermediárias são usadas para construir o necessário que será passado apenas para a imagem final.

		FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
		WORKDIR /app
		COPY *.csproj ./
		RUN dotnet restore
		COPY . ./
		RUN dotnet publish -c Release -o out

		FROM mcr.microsoft.com/dotnet/aspnet:6.0
		WORKDIR /app
		COPY --from=build /app/out .     
		ENTRYPOINT [ "dotnet", "ItemService.dll" ]
		
	Este exemplo está declarando a criação de duas Images no mesmo Dockerfile.
	Onde o primeiro é a Image base, que irá contruir a aplicação no container, e o segundo irá ser usado para colocar a aplicação em execução.
		app/out é o app "buildado"
		
		COPY --from=build /app/out . -> Copia a saida da image de build para a nova image gerada usar como base.
		
	Utilizando este método, é economizado mais espaço, por gerar images mais leves, por não armazenarem todos os componentes de build em camadas da image.
	
	
	No projeto de exemplo, estavamos usando um banco mysql local. Porém, para trabalhar com containers, é ncessário ter um banco que rode em um container também:
	
	docker run --name=mysql -e MYSQL_ROOT_PASSWORD=Dev@0258 -d mysql:5.6
	
	Comando para executar um container mysql.
	
	Após criar o container mysql, usamos o comando docker inspect [id-container] para verficiar o IPAddress do mesmo.
	Agora então, vamos alterar a string de conexão para buscar o server da aplicação, no ip do container mysql:
		"ConnectionStrings": {
    "RestauranteConnection": "server=172.17.0.3;database=restaurantedb;user=root;password=root"
	
	Configurar a conexão entre os container itemservice e restaurante service:
	"ItemService": "http://172.17.0.4/api/item/restaurante"
	
	Pegando o endereço do container do itemservice e inserindo na variaval de ambiente "ItemService" do arquivo de configuração do restauranteservie.
	
	docker logs -f id-container -> Exibe os logs gerados pelo container.
	
	
	